/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemQuantityAllocated from './ItemQuantityAllocated';
import ItemQuantityAvailable from './ItemQuantityAvailable';
import ItemQuantityMaximum from './ItemQuantityMaximum';
import ItemQuantityMinimum from './ItemQuantityMinimum';
import ItemQuantitySelected from './ItemQuantitySelected';
import ItemQuantityUnitized from './ItemQuantityUnitized';

/**
 * The ItemQuantity model module.
 * @module model/ItemQuantity
 * @version 1.1.0
 */
class ItemQuantity {
    /**
     * Constructs a new <code>ItemQuantity</code>.
     * Describes the count or amount of an item
     * @alias module:model/ItemQuantity
     */
    constructor() { 
        
        ItemQuantity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemQuantity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemQuantity} obj Optional instance to populate.
     * @return {module:model/ItemQuantity} The populated <code>ItemQuantity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemQuantity();

            if (data.hasOwnProperty('allocated')) {
                obj['allocated'] = ItemQuantityAllocated.constructFromObject(data['allocated']);
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ItemQuantityAvailable.constructFromObject(data['available']);
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ItemQuantityMaximum.constructFromObject(data['maximum']);
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ItemQuantityMinimum.constructFromObject(data['minimum']);
            }
            if (data.hasOwnProperty('selected')) {
                obj['selected'] = ItemQuantitySelected.constructFromObject(data['selected']);
            }
            if (data.hasOwnProperty('unitized')) {
                obj['unitized'] = ItemQuantityUnitized.constructFromObject(data['unitized']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemQuantity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemQuantity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `allocated`
        if (data['allocated']) { // data not null
          ItemQuantityAllocated.validateJSON(data['allocated']);
        }
        // validate the optional field `available`
        if (data['available']) { // data not null
          ItemQuantityAvailable.validateJSON(data['available']);
        }
        // validate the optional field `maximum`
        if (data['maximum']) { // data not null
          ItemQuantityMaximum.validateJSON(data['maximum']);
        }
        // validate the optional field `minimum`
        if (data['minimum']) { // data not null
          ItemQuantityMinimum.validateJSON(data['minimum']);
        }
        // validate the optional field `selected`
        if (data['selected']) { // data not null
          ItemQuantitySelected.validateJSON(data['selected']);
        }
        // validate the optional field `unitized`
        if (data['unitized']) { // data not null
          ItemQuantityUnitized.validateJSON(data['unitized']);
        }

        return true;
    }


}



/**
 * @member {module:model/ItemQuantityAllocated} allocated
 */
ItemQuantity.prototype['allocated'] = undefined;

/**
 * @member {module:model/ItemQuantityAvailable} available
 */
ItemQuantity.prototype['available'] = undefined;

/**
 * @member {module:model/ItemQuantityMaximum} maximum
 */
ItemQuantity.prototype['maximum'] = undefined;

/**
 * @member {module:model/ItemQuantityMinimum} minimum
 */
ItemQuantity.prototype['minimum'] = undefined;

/**
 * @member {module:model/ItemQuantitySelected} selected
 */
ItemQuantity.prototype['selected'] = undefined;

/**
 * @member {module:model/ItemQuantityUnitized} unitized
 */
ItemQuantity.prototype['unitized'] = undefined;






export default ItemQuantity;

