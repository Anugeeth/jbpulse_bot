/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Descriptor from './Descriptor';
import Fulfillment from './Fulfillment';
import Offer from './Offer';
import Payment from './Payment';
import Provider from './Provider';

/**
 * The Catalog model module.
 * @module model/Catalog
 * @version 1.1.0
 */
class Catalog {
    /**
     * Constructs a new <code>Catalog</code>.
     * Describes the products or services offered by a BPP. This is typically sent as the response to a search intent from a BAP. The payment terms, offers and terms of fulfillment supported by the BPP can also be included here. The BPP can show hierarchical nature of products/services in its catalog using the parent_category_id in categories. The BPP can also send a ttl (time to live) in the context which is the duration for which a BAP can cache the catalog and use the cached catalog.  &lt;br&gt;This has properties like bbp/descriptor,bbp/categories,bbp/fulfillments,bbp/payments,bbp/offers,bbp/providers and exp&lt;br&gt;This is used in the following situations.&lt;br&gt;&lt;ul&gt;&lt;li&gt;This is typically used in the discovery stage when the BPP sends the details of the products and services it offers as response to a search intent from the BAP. &lt;/li&gt;&lt;/ul&gt;
     * @alias module:model/Catalog
     */
    constructor() { 
        
        Catalog.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Catalog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Catalog} obj Optional instance to populate.
     * @return {module:model/Catalog} The populated <code>Catalog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Catalog();

            if (data.hasOwnProperty('descriptor')) {
                obj['descriptor'] = Descriptor.constructFromObject(data['descriptor']);
            }
            if (data.hasOwnProperty('fulfillments')) {
                obj['fulfillments'] = ApiClient.convertToType(data['fulfillments'], [Fulfillment]);
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [Payment]);
            }
            if (data.hasOwnProperty('offers')) {
                obj['offers'] = ApiClient.convertToType(data['offers'], [Offer]);
            }
            if (data.hasOwnProperty('providers')) {
                obj['providers'] = ApiClient.convertToType(data['providers'], [Provider]);
            }
            if (data.hasOwnProperty('exp')) {
                obj['exp'] = ApiClient.convertToType(data['exp'], 'Date');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Catalog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Catalog</code>.
     */
    static validateJSON(data) {
        // validate the optional field `descriptor`
        if (data['descriptor']) { // data not null
          Descriptor.validateJSON(data['descriptor']);
        }
        if (data['fulfillments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fulfillments'])) {
                throw new Error("Expected the field `fulfillments` to be an array in the JSON data but got " + data['fulfillments']);
            }
            // validate the optional field `fulfillments` (array)
            for (const item of data['fulfillments']) {
                Fulfillment.validateJSON(item);
            };
        }
        if (data['payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payments'])) {
                throw new Error("Expected the field `payments` to be an array in the JSON data but got " + data['payments']);
            }
            // validate the optional field `payments` (array)
            for (const item of data['payments']) {
                Payment.validateJSON(item);
            };
        }
        if (data['offers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offers'])) {
                throw new Error("Expected the field `offers` to be an array in the JSON data but got " + data['offers']);
            }
            // validate the optional field `offers` (array)
            for (const item of data['offers']) {
                Offer.validateJSON(item);
            };
        }
        if (data['providers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['providers'])) {
                throw new Error("Expected the field `providers` to be an array in the JSON data but got " + data['providers']);
            }
            // validate the optional field `providers` (array)
            for (const item of data['providers']) {
                Provider.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }

        return true;
    }


}



/**
 * @member {module:model/Descriptor} descriptor
 */
Catalog.prototype['descriptor'] = undefined;

/**
 * Fulfillment modes offered at the BPP level. This is used when a BPP itself offers fulfillments on behalf of the providers it has onboarded.
 * @member {Array.<module:model/Fulfillment>} fulfillments
 */
Catalog.prototype['fulfillments'] = undefined;

/**
 * Payment terms offered by the BPP for all transactions. This can be overriden at the provider level.
 * @member {Array.<module:model/Payment>} payments
 */
Catalog.prototype['payments'] = undefined;

/**
 * Offers at the BPP-level. This is common across all providers onboarded by the BPP.
 * @member {Array.<module:model/Offer>} offers
 */
Catalog.prototype['offers'] = undefined;

/**
 * @member {Array.<module:model/Provider>} providers
 */
Catalog.prototype['providers'] = undefined;

/**
 * Timestamp after which catalog will expire
 * @member {Date} exp
 */
Catalog.prototype['exp'] = undefined;

/**
 * Duration in seconds after which this catalog will expire
 * @member {String} ttl
 */
Catalog.prototype['ttl'] = undefined;






export default Catalog;

