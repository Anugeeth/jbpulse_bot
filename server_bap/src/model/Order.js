/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddOn from './AddOn';
import Billing from './Billing';
import Cancellation from './Cancellation';
import CancellationTerm from './CancellationTerm';
import Fulfillment from './Fulfillment';
import Item from './Item';
import Items from './Items';
import Offer from './Offer';
import Payment from './Payment';
import Provider from './Provider';
import Quotation from './Quotation';
import ReplacementTerm from './ReplacementTerm';
import ReturnTerm from './ReturnTerm';
import TagGroup from './TagGroup';
import XInput from './XInput';

/**
 * The Order model module.
 * @module model/Order
 * @version 1.1.0
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * Describes a legal purchase order. It contains the complete details of the legal contract created between the buyer and the seller.
     * @alias module:model/Order
     */
    constructor() { 
        
        Order.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ref_order_ids')) {
                obj['ref_order_ids'] = ApiClient.convertToType(data['ref_order_ids'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], Provider);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item]);
            }
            if (data.hasOwnProperty('add_ons')) {
                obj['add_ons'] = ApiClient.convertToType(data['add_ons'], [AddOn]);
            }
            if (data.hasOwnProperty('offers')) {
                obj['offers'] = ApiClient.convertToType(data['offers'], [Offer]);
            }
            if (data.hasOwnProperty('billing')) {
                obj['billing'] = ApiClient.convertToType(data['billing'], Billing);
            }
            if (data.hasOwnProperty('fulfillments')) {
                obj['fulfillments'] = ApiClient.convertToType(data['fulfillments'], [Fulfillment]);
            }
            if (data.hasOwnProperty('cancellation')) {
                obj['cancellation'] = ApiClient.convertToType(data['cancellation'], Cancellation);
            }
            if (data.hasOwnProperty('cancellation_terms')) {
                obj['cancellation_terms'] = ApiClient.convertToType(data['cancellation_terms'], [CancellationTerm]);
            }
            if (data.hasOwnProperty('refund_terms')) {
                obj['refund_terms'] = ApiClient.convertToType(data['refund_terms'], [Items]);
            }
            if (data.hasOwnProperty('replacement_terms')) {
                obj['replacement_terms'] = ApiClient.convertToType(data['replacement_terms'], [ReplacementTerm]);
            }
            if (data.hasOwnProperty('return_terms')) {
                obj['return_terms'] = ApiClient.convertToType(data['return_terms'], [ReturnTerm]);
            }
            if (data.hasOwnProperty('quote')) {
                obj['quote'] = ApiClient.convertToType(data['quote'], Quotation);
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [Payment]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('xinput')) {
                obj['xinput'] = ApiClient.convertToType(data['xinput'], XInput);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [TagGroup]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ref_order_ids'])) {
            throw new Error("Expected the field `ref_order_ids` to be an array in the JSON data but got " + data['ref_order_ids']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `provider`
        if (data['provider']) { // data not null
          Provider.validateJSON(data['provider']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item.validateJSON(item);
            };
        }
        if (data['add_ons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['add_ons'])) {
                throw new Error("Expected the field `add_ons` to be an array in the JSON data but got " + data['add_ons']);
            }
            // validate the optional field `add_ons` (array)
            for (const item of data['add_ons']) {
                AddOn.validateJSON(item);
            };
        }
        if (data['offers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offers'])) {
                throw new Error("Expected the field `offers` to be an array in the JSON data but got " + data['offers']);
            }
            // validate the optional field `offers` (array)
            for (const item of data['offers']) {
                Offer.validateJSON(item);
            };
        }
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          Billing.validateJSON(data['billing']);
        }
        if (data['fulfillments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fulfillments'])) {
                throw new Error("Expected the field `fulfillments` to be an array in the JSON data but got " + data['fulfillments']);
            }
            // validate the optional field `fulfillments` (array)
            for (const item of data['fulfillments']) {
                Fulfillment.validateJSON(item);
            };
        }
        // validate the optional field `cancellation`
        if (data['cancellation']) { // data not null
          Cancellation.validateJSON(data['cancellation']);
        }
        if (data['cancellation_terms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cancellation_terms'])) {
                throw new Error("Expected the field `cancellation_terms` to be an array in the JSON data but got " + data['cancellation_terms']);
            }
            // validate the optional field `cancellation_terms` (array)
            for (const item of data['cancellation_terms']) {
                CancellationTerm.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['refund_terms'])) {
            throw new Error("Expected the field `refund_terms` to be an array in the JSON data but got " + data['refund_terms']);
        }
        if (data['replacement_terms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['replacement_terms'])) {
                throw new Error("Expected the field `replacement_terms` to be an array in the JSON data but got " + data['replacement_terms']);
            }
            // validate the optional field `replacement_terms` (array)
            for (const item of data['replacement_terms']) {
                ReplacementTerm.validateJSON(item);
            };
        }
        if (data['return_terms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['return_terms'])) {
                throw new Error("Expected the field `return_terms` to be an array in the JSON data but got " + data['return_terms']);
            }
            // validate the optional field `return_terms` (array)
            for (const item of data['return_terms']) {
                ReturnTerm.validateJSON(item);
            };
        }
        // validate the optional field `quote`
        if (data['quote']) { // data not null
          Quotation.validateJSON(data['quote']);
        }
        if (data['payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payments'])) {
                throw new Error("Expected the field `payments` to be an array in the JSON data but got " + data['payments']);
            }
            // validate the optional field `payments` (array)
            for (const item of data['payments']) {
                Payment.validateJSON(item);
            };
        }
        // validate the optional field `xinput`
        if (data['xinput']) { // data not null
          XInput.validateJSON(data['xinput']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                TagGroup.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Human-readable ID of the order. This is generated at the BPP layer. The BPP can either generate order id within its system or forward the order ID created at the provider level.
 * @member {String} id
 */
Order.prototype['id'] = undefined;

/**
 * A list of order IDs to link this order to previous orders.
 * @member {Array.<String>} ref_order_ids
 */
Order.prototype['ref_order_ids'] = undefined;

/**
 * Status of the order. Allowed values can be defined by the network policy
 * @member {module:model/Order.StatusEnum} status
 */
Order.prototype['status'] = undefined;

/**
 * This is used to indicate the type of order being created to BPPs. Sometimes orders can be linked to previous orders, like a replacement order in a retail domain. A follow-up consultation in healthcare domain. A single order part of a subscription order. The list of order types can be standardized at the network level.
 * @member {module:model/Order.TypeEnum} type
 * @default 'DEFAULT'
 */
Order.prototype['type'] = 'DEFAULT';

/**
 * @member {module:model/Provider} provider
 */
Order.prototype['provider'] = undefined;

/**
 * The items purchased / availed in this order
 * @member {Array.<module:model/Item>} items
 */
Order.prototype['items'] = undefined;

/**
 * The add-ons purchased / availed in this order
 * @member {Array.<module:model/AddOn>} add_ons
 */
Order.prototype['add_ons'] = undefined;

/**
 * The offers applied in this order
 * @member {Array.<module:model/Offer>} offers
 */
Order.prototype['offers'] = undefined;

/**
 * @member {module:model/Billing} billing
 */
Order.prototype['billing'] = undefined;

/**
 * The fulfillments involved in completing this order
 * @member {Array.<module:model/Fulfillment>} fulfillments
 */
Order.prototype['fulfillments'] = undefined;

/**
 * @member {module:model/Cancellation} cancellation
 */
Order.prototype['cancellation'] = undefined;

/**
 * Cancellation terms of this item
 * @member {Array.<module:model/CancellationTerm>} cancellation_terms
 */
Order.prototype['cancellation_terms'] = undefined;

/**
 * Refund terms of this item
 * @member {Array.<module:model/Items>} refund_terms
 */
Order.prototype['refund_terms'] = undefined;

/**
 * Replacement terms of this item
 * @member {Array.<module:model/ReplacementTerm>} replacement_terms
 */
Order.prototype['replacement_terms'] = undefined;

/**
 * Return terms of this item
 * @member {Array.<module:model/ReturnTerm>} return_terms
 */
Order.prototype['return_terms'] = undefined;

/**
 * @member {module:model/Quotation} quote
 */
Order.prototype['quote'] = undefined;

/**
 * The terms of settlement for this order
 * @member {Array.<module:model/Payment>} payments
 */
Order.prototype['payments'] = undefined;

/**
 * The date-time of creation of this order
 * @member {Date} created_at
 */
Order.prototype['created_at'] = undefined;

/**
 * The date-time of updated of this order
 * @member {Date} updated_at
 */
Order.prototype['updated_at'] = undefined;

/**
 * @member {module:model/XInput} xinput
 */
Order.prototype['xinput'] = undefined;

/**
 * @member {Array.<module:model/TagGroup>} tags
 */
Order.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Order['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Order['TypeEnum'] = {

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT"
};



export default Order;

