/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Rating model module.
 * @module model/Rating
 * @version 1.1.0
 */
class Rating {
    /**
     * Constructs a new <code>Rating</code>.
     * Describes the rating of an entity
     * @alias module:model/Rating
     */
    constructor() { 
        
        Rating.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rating</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rating} obj Optional instance to populate.
     * @return {module:model/Rating} The populated <code>Rating</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rating();

            if (data.hasOwnProperty('rating_category')) {
                obj['rating_category'] = ApiClient.convertToType(data['rating_category'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rating</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rating</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['rating_category'] && !(typeof data['rating_category'] === 'string' || data['rating_category'] instanceof String)) {
            throw new Error("Expected the field `rating_category` to be a primitive type in the JSON string but got " + data['rating_category']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Category of the entity being rated
 * @member {module:model/Rating.RatingCategoryEnum} rating_category
 */
Rating.prototype['rating_category'] = undefined;

/**
 * Id of the object being rated
 * @member {String} id
 */
Rating.prototype['id'] = undefined;

/**
 * Rating value given to the object. This can be a single value or can also contain an inequality operator like gt, gte, lt, lte. This can also contain an inequality expression containing logical operators like && and ||.
 * @member {String} value
 */
Rating.prototype['value'] = undefined;





/**
 * Allowed values for the <code>rating_category</code> property.
 * @enum {String}
 * @readonly
 */
Rating['RatingCategoryEnum'] = {

    /**
     * value: "Item"
     * @const
     */
    "Item": "Item",

    /**
     * value: "Order"
     * @const
     */
    "Order": "Order",

    /**
     * value: "Fulfillment"
     * @const
     */
    "Fulfillment": "Fulfillment",

    /**
     * value: "Provider"
     * @const
     */
    "Provider": "Provider",

    /**
     * value: "Agent"
     * @const
     */
    "Agent": "Agent",

    /**
     * value: "Support"
     * @const
     */
    "Support": "Support"
};



export default Rating;

