/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Price model module.
 * @module model/Price
 * @version 1.1.0
 */
class Price {
    /**
     * Constructs a new <code>Price</code>.
     * Describes the price of a product or service
     * @alias module:model/Price
     */
    constructor() { 
        
        Price.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Price</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Price} obj Optional instance to populate.
     * @return {module:model/Price} The populated <code>Price</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Price();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('estimated_value')) {
                obj['estimated_value'] = ApiClient.convertToType(data['estimated_value'], 'String');
            }
            if (data.hasOwnProperty('computed_value')) {
                obj['computed_value'] = ApiClient.convertToType(data['computed_value'], 'String');
            }
            if (data.hasOwnProperty('listed_value')) {
                obj['listed_value'] = ApiClient.convertToType(data['listed_value'], 'String');
            }
            if (data.hasOwnProperty('offered_value')) {
                obj['offered_value'] = ApiClient.convertToType(data['offered_value'], 'String');
            }
            if (data.hasOwnProperty('minimum_value')) {
                obj['minimum_value'] = ApiClient.convertToType(data['minimum_value'], 'String');
            }
            if (data.hasOwnProperty('maximum_value')) {
                obj['maximum_value'] = ApiClient.convertToType(data['maximum_value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Price</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Price</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['estimated_value'] && !(typeof data['estimated_value'] === 'string' || data['estimated_value'] instanceof String)) {
            throw new Error("Expected the field `estimated_value` to be a primitive type in the JSON string but got " + data['estimated_value']);
        }
        // ensure the json data is a string
        if (data['computed_value'] && !(typeof data['computed_value'] === 'string' || data['computed_value'] instanceof String)) {
            throw new Error("Expected the field `computed_value` to be a primitive type in the JSON string but got " + data['computed_value']);
        }
        // ensure the json data is a string
        if (data['listed_value'] && !(typeof data['listed_value'] === 'string' || data['listed_value'] instanceof String)) {
            throw new Error("Expected the field `listed_value` to be a primitive type in the JSON string but got " + data['listed_value']);
        }
        // ensure the json data is a string
        if (data['offered_value'] && !(typeof data['offered_value'] === 'string' || data['offered_value'] instanceof String)) {
            throw new Error("Expected the field `offered_value` to be a primitive type in the JSON string but got " + data['offered_value']);
        }
        // ensure the json data is a string
        if (data['minimum_value'] && !(typeof data['minimum_value'] === 'string' || data['minimum_value'] instanceof String)) {
            throw new Error("Expected the field `minimum_value` to be a primitive type in the JSON string but got " + data['minimum_value']);
        }
        // ensure the json data is a string
        if (data['maximum_value'] && !(typeof data['maximum_value'] === 'string' || data['maximum_value'] instanceof String)) {
            throw new Error("Expected the field `maximum_value` to be a primitive type in the JSON string but got " + data['maximum_value']);
        }

        return true;
    }


}



/**
 * @member {String} currency
 */
Price.prototype['currency'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} value
 */
Price.prototype['value'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} estimated_value
 */
Price.prototype['estimated_value'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} computed_value
 */
Price.prototype['computed_value'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} listed_value
 */
Price.prototype['listed_value'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} offered_value
 */
Price.prototype['offered_value'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} minimum_value
 */
Price.prototype['minimum_value'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} maximum_value
 */
Price.prototype['maximum_value'] = undefined;






export default Price;

