/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Form from './Form';

/**
 * The XInput model module.
 * @module model/XInput
 * @version 1.1.0
 */
class XInput {
    /**
     * Constructs a new <code>XInput</code>.
     * Contains any additional or extended inputs required to confirm an order. This is typically a Form Input. Sometimes, selection of catalog elements is not enough for the BPP to confirm an order. For example, to confirm a flight ticket, the airline requires details of the passengers along with information on baggage, identity, in addition to the class of ticket. Similarly, a logistics company may require details on the nature of shipment in order to confirm the shipping. A recruiting firm may require additional details on the applicant in order to confirm a job application. For all such purposes, the BPP can choose to send this object attached to any object in the catalog that is required to be sent while placing the order. This object can typically be sent at an item level or at the order level. The item level XInput will override the Order level XInput as it indicates a special requirement of information for that particular item. Hence the BAP must render a separate form for the Item and another form at the Order level before confirmation.
     * @alias module:model/XInput
     */
    constructor() { 
        
        XInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>XInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/XInput} obj Optional instance to populate.
     * @return {module:model/XInput} The populated <code>XInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new XInput();

            if (data.hasOwnProperty('form')) {
                obj['form'] = Form.constructFromObject(data['form']);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>XInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>XInput</code>.
     */
    static validateJSON(data) {
        // validate the optional field `form`
        if (data['form']) { // data not null
          Form.validateJSON(data['form']);
        }

        return true;
    }


}



/**
 * @member {module:model/Form} form
 */
XInput.prototype['form'] = undefined;

/**
 * Indicates whether the form data is mandatorily required by the BPP to confirm the order.
 * @member {Boolean} required
 */
XInput.prototype['required'] = undefined;






export default XInput;

