/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Descriptor from './Descriptor';
import Price from './Price';

/**
 * The AddOn model module.
 * @module model/AddOn
 * @version 1.1.0
 */
class AddOn {
    /**
     * Constructs a new <code>AddOn</code>.
     * Describes an additional item offered as a value-addition to a product or service. This does not exist independently in a catalog and is always associated with an item.
     * @alias module:model/AddOn
     */
    constructor() { 
        
        AddOn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddOn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddOn} obj Optional instance to populate.
     * @return {module:model/AddOn} The populated <code>AddOn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddOn();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('descriptor')) {
                obj['descriptor'] = Descriptor.constructFromObject(data['descriptor']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddOn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddOn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `descriptor`
        if (data['descriptor']) { // data not null
          Descriptor.validateJSON(data['descriptor']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }

        return true;
    }


}



/**
 * Provider-defined ID of the add-on
 * @member {String} id
 */
AddOn.prototype['id'] = undefined;

/**
 * @member {module:model/Descriptor} descriptor
 */
AddOn.prototype['descriptor'] = undefined;

/**
 * @member {module:model/Price} price
 */
AddOn.prototype['price'] = undefined;






export default AddOn;

