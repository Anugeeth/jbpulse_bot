/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';
import SearchPost200ResponseMessage from './SearchPost200ResponseMessage';

/**
 * The SearchPost200Response model module.
 * @module model/SearchPost200Response
 * @version 1.1.0
 */
class SearchPost200Response {
    /**
     * Constructs a new <code>SearchPost200Response</code>.
     * @alias module:model/SearchPost200Response
     * @param message {module:model/SearchPost200ResponseMessage} 
     */
    constructor(message) { 
        
        SearchPost200Response.initialize(this, message);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message) { 
        obj['message'] = message;
    }

    /**
     * Constructs a <code>SearchPost200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchPost200Response} obj Optional instance to populate.
     * @return {module:model/SearchPost200Response} The populated <code>SearchPost200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchPost200Response();

            if (data.hasOwnProperty('message')) {
                obj['message'] = SearchPost200ResponseMessage.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Error.constructFromObject(data['error']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchPost200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchPost200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchPost200Response.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          SearchPost200ResponseMessage.validateJSON(data['message']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          Error.validateJSON(data['error']);
        }

        return true;
    }


}

SearchPost200Response.RequiredProperties = ["message"];

/**
 * @member {module:model/SearchPost200ResponseMessage} message
 */
SearchPost200Response.prototype['message'] = undefined;

/**
 * @member {module:model/Error} error
 */
SearchPost200Response.prototype['error'] = undefined;






export default SearchPost200Response;

