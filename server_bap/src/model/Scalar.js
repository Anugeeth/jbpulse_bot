/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScalarRange from './ScalarRange';

/**
 * The Scalar model module.
 * @module model/Scalar
 * @version 1.1.0
 */
class Scalar {
    /**
     * Constructs a new <code>Scalar</code>.
     * Describes a scalar
     * @alias module:model/Scalar
     */
    constructor() { 
        
        Scalar.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Scalar</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scalar} obj Optional instance to populate.
     * @return {module:model/Scalar} The populated <code>Scalar</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scalar();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('estimated_value')) {
                obj['estimated_value'] = ApiClient.convertToType(data['estimated_value'], 'String');
            }
            if (data.hasOwnProperty('computed_value')) {
                obj['computed_value'] = ApiClient.convertToType(data['computed_value'], 'String');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = ScalarRange.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Scalar</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Scalar</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['estimated_value'] && !(typeof data['estimated_value'] === 'string' || data['estimated_value'] instanceof String)) {
            throw new Error("Expected the field `estimated_value` to be a primitive type in the JSON string but got " + data['estimated_value']);
        }
        // ensure the json data is a string
        if (data['computed_value'] && !(typeof data['computed_value'] === 'string' || data['computed_value'] instanceof String)) {
            throw new Error("Expected the field `computed_value` to be a primitive type in the JSON string but got " + data['computed_value']);
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          ScalarRange.validateJSON(data['range']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * @member {module:model/Scalar.TypeEnum} type
 */
Scalar.prototype['type'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} value
 */
Scalar.prototype['value'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} estimated_value
 */
Scalar.prototype['estimated_value'] = undefined;

/**
 * Describes a numerical value in decimal form
 * @member {String} computed_value
 */
Scalar.prototype['computed_value'] = undefined;

/**
 * @member {module:model/ScalarRange} range
 */
Scalar.prototype['range'] = undefined;

/**
 * @member {String} unit
 */
Scalar.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Scalar['TypeEnum'] = {

    /**
     * value: "CONSTANT"
     * @const
     */
    "CONSTANT": "CONSTANT",

    /**
     * value: "VARIABLE"
     * @const
     */
    "VARIABLE": "VARIABLE"
};



export default Scalar;

