/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MediaFile model module.
 * @module model/MediaFile
 * @version 1.1.0
 */
class MediaFile {
    /**
     * Constructs a new <code>MediaFile</code>.
     * This object contains a url to a media file.
     * @alias module:model/MediaFile
     */
    constructor() { 
        
        MediaFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaFile} obj Optional instance to populate.
     * @return {module:model/MediaFile} The populated <code>MediaFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaFile();

            if (data.hasOwnProperty('mimetype')) {
                obj['mimetype'] = ApiClient.convertToType(data['mimetype'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('dsa')) {
                obj['dsa'] = ApiClient.convertToType(data['dsa'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mimetype'] && !(typeof data['mimetype'] === 'string' || data['mimetype'] instanceof String)) {
            throw new Error("Expected the field `mimetype` to be a primitive type in the JSON string but got " + data['mimetype']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // ensure the json data is a string
        if (data['dsa'] && !(typeof data['dsa'] === 'string' || data['dsa'] instanceof String)) {
            throw new Error("Expected the field `dsa` to be a primitive type in the JSON string but got " + data['dsa']);
        }

        return true;
    }


}



/**
 * indicates the nature and format of the document, file, or assortment of bytes. MIME types are defined and standardized in IETF's RFC 6838
 * @member {String} mimetype
 */
MediaFile.prototype['mimetype'] = undefined;

/**
 * The URL of the file
 * @member {String} url
 */
MediaFile.prototype['url'] = undefined;

/**
 * The digital signature of the file signed by the sender
 * @member {String} signature
 */
MediaFile.prototype['signature'] = undefined;

/**
 * The signing algorithm used by the sender
 * @member {String} dsa
 */
MediaFile.prototype['dsa'] = undefined;






export default MediaFile;

