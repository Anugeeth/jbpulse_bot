/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';
import Organization from './Organization';
import Person from './Person';
import Value from './Value';

/**
 * The Agent model module.
 * @module model/Agent
 * @version 1.1.0
 */
class Agent {
    /**
     * Constructs a new <code>Agent</code>.
     * Describes the direct performer, driver or executor that fulfills an order. It is usually a person. But in some rare cases, it could be a non-living entity like a drone, or a bot. Some examples of agents are Doctor in the healthcare sector, a driver in the mobility sector, or a delivery person in the logistics sector. This object can be set at any stage of the order lifecycle. This can be set at the discovery stage when the BPP wants to provide details on the agent fulfilling the order, like in healthcare, where the doctor&#39;s name appears during search. This object can also used to search for a particular person that the customer wants fulfilling an order. Sometimes, this object gets instantiated after the order is confirmed, like in the case of on-demand taxis, where the driver is assigned after the user confirms the ride.
     * @alias module:model/Agent
     */
    constructor() { 
        
        Agent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Agent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Agent} obj Optional instance to populate.
     * @return {module:model/Agent} The populated <code>Agent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Agent();

            if (data.hasOwnProperty('person')) {
                obj['person'] = Person.constructFromObject(data['person']);
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = Contact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = Organization.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = Value.constructFromObject(data['rating']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Agent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Agent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `person`
        if (data['person']) { // data not null
          Person.validateJSON(data['person']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          Contact.validateJSON(data['contact']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          Organization.validateJSON(data['organization']);
        }

        return true;
    }


}



/**
 * @member {module:model/Person} person
 */
Agent.prototype['person'] = undefined;

/**
 * @member {module:model/Contact} contact
 */
Agent.prototype['contact'] = undefined;

/**
 * @member {module:model/Organization} organization
 */
Agent.prototype['organization'] = undefined;

/**
 * @member {module:model/Value} rating
 */
Agent.prototype['rating'] = undefined;






export default Agent;

