/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Region model module.
 * @module model/Region
 * @version 1.1.0
 */
class Region {
    /**
     * Constructs a new <code>Region</code>.
     * Describes an arbitrary region of space. The network policy should contain a published list of supported regions by the network.
     * @alias module:model/Region
     */
    constructor() { 
        
        Region.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Region</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Region} obj Optional instance to populate.
     * @return {module:model/Region} The populated <code>Region</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Region();

            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('boundary')) {
                obj['boundary'] = ApiClient.convertToType(data['boundary'], 'String');
            }
            if (data.hasOwnProperty('map_url')) {
                obj['map_url'] = ApiClient.convertToType(data['map_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Region</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Region</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dimensions'] && !(typeof data['dimensions'] === 'string' || data['dimensions'] instanceof String)) {
            throw new Error("Expected the field `dimensions` to be a primitive type in the JSON string but got " + data['dimensions']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['boundary'] && !(typeof data['boundary'] === 'string' || data['boundary'] instanceof String)) {
            throw new Error("Expected the field `boundary` to be a primitive type in the JSON string but got " + data['boundary']);
        }
        // ensure the json data is a string
        if (data['map_url'] && !(typeof data['map_url'] === 'string' || data['map_url'] instanceof String)) {
            throw new Error("Expected the field `map_url` to be a primitive type in the JSON string but got " + data['map_url']);
        }

        return true;
    }


}



/**
 * The number of dimensions that are used to describe any point inside that region. The most common dimensionality of a region is 2, that represents an area on a map. There are regions on the map that can be approximated to one-dimensional regions like roads, railway lines, or shipping lines. 3 dimensional regions are rarer, but are gaining popularity as flying drones are being adopted for various fulfillment services.
 * @member {module:model/Region.DimensionsEnum} dimensions
 */
Region.prototype['dimensions'] = undefined;

/**
 * The type of region. This is used to specify the granularity of the region represented by this object. Various examples of two-dimensional region types are city, country, state, district, and so on. The network policy should contain a list of all possible region types supported by the network.
 * @member {String} type
 */
Region.prototype['type'] = undefined;

/**
 * Name of the region as specified on the map where that region exists.
 * @member {String} name
 */
Region.prototype['name'] = undefined;

/**
 * A standard code representing the region. This should be interpreted in the same way by all network participants.
 * @member {String} code
 */
Region.prototype['code'] = undefined;

/**
 * A string representing the boundary of the region. One-dimensional regions are represented by polylines. Two-dimensional regions are represented by polygons, and three-dimensional regions can represented by polyhedra.
 * @member {String} boundary
 */
Region.prototype['boundary'] = undefined;

/**
 * The url to the map of the region. This can be a globally recognized map or the one specified by the network policy.
 * @member {String} map_url
 */
Region.prototype['map_url'] = undefined;





/**
 * Allowed values for the <code>dimensions</code> property.
 * @enum {String}
 * @readonly
 */
Region['DimensionsEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "3"
     * @const
     */
    "3": "3"
};



export default Region;

