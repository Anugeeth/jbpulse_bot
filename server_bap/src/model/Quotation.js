/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';
import QuotationBreakupInner from './QuotationBreakupInner';

/**
 * The Quotation model module.
 * @module model/Quotation
 * @version 1.1.0
 */
class Quotation {
    /**
     * Constructs a new <code>Quotation</code>.
     * Describes a quote. It is the estimated price of products or services from the BPP.&lt;br&gt;This has properties like price, breakup, ttl
     * @alias module:model/Quotation
     */
    constructor() { 
        
        Quotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Quotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Quotation} obj Optional instance to populate.
     * @return {module:model/Quotation} The populated <code>Quotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Quotation();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], Price);
            }
            if (data.hasOwnProperty('breakup')) {
                obj['breakup'] = ApiClient.convertToType(data['breakup'], [QuotationBreakupInner]);
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Quotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Quotation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        if (data['breakup']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['breakup'])) {
                throw new Error("Expected the field `breakup` to be an array in the JSON data but got " + data['breakup']);
            }
            // validate the optional field `breakup` (array)
            for (const item of data['breakup']) {
                QuotationBreakupInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }

        return true;
    }


}



/**
 * ID of the quote.
 * @member {String} id
 */
Quotation.prototype['id'] = undefined;

/**
 * @member {module:model/Price} price
 */
Quotation.prototype['price'] = undefined;

/**
 * the breakup of the total quoted price
 * @member {Array.<module:model/QuotationBreakupInner>} breakup
 */
Quotation.prototype['breakup'] = undefined;

/**
 * Describes duration as per ISO8601 format
 * @member {String} ttl
 */
Quotation.prototype['ttl'] = undefined;






export default Quotation;

