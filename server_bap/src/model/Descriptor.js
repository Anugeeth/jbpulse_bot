/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DescriptorAdditionalDesc from './DescriptorAdditionalDesc';
import Image from './Image';
import MediaFile from './MediaFile';

/**
 * The Descriptor model module.
 * @module model/Descriptor
 * @version 1.1.0
 */
class Descriptor {
    /**
     * Constructs a new <code>Descriptor</code>.
     * Physical description of something.
     * @alias module:model/Descriptor
     */
    constructor() { 
        
        Descriptor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Descriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Descriptor} obj Optional instance to populate.
     * @return {module:model/Descriptor} The populated <code>Descriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Descriptor();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('short_desc')) {
                obj['short_desc'] = ApiClient.convertToType(data['short_desc'], 'String');
            }
            if (data.hasOwnProperty('long_desc')) {
                obj['long_desc'] = ApiClient.convertToType(data['long_desc'], 'String');
            }
            if (data.hasOwnProperty('additional_desc')) {
                obj['additional_desc'] = DescriptorAdditionalDesc.constructFromObject(data['additional_desc']);
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], [MediaFile]);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Descriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Descriptor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['short_desc'] && !(typeof data['short_desc'] === 'string' || data['short_desc'] instanceof String)) {
            throw new Error("Expected the field `short_desc` to be a primitive type in the JSON string but got " + data['short_desc']);
        }
        // ensure the json data is a string
        if (data['long_desc'] && !(typeof data['long_desc'] === 'string' || data['long_desc'] instanceof String)) {
            throw new Error("Expected the field `long_desc` to be a primitive type in the JSON string but got " + data['long_desc']);
        }
        // validate the optional field `additional_desc`
        if (data['additional_desc']) { // data not null
          DescriptorAdditionalDesc.validateJSON(data['additional_desc']);
        }
        if (data['media']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['media'])) {
                throw new Error("Expected the field `media` to be an array in the JSON data but got " + data['media']);
            }
            // validate the optional field `media` (array)
            for (const item of data['media']) {
                MediaFile.validateJSON(item);
            };
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                Image.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} name
 */
Descriptor.prototype['name'] = undefined;

/**
 * @member {String} code
 */
Descriptor.prototype['code'] = undefined;

/**
 * @member {String} short_desc
 */
Descriptor.prototype['short_desc'] = undefined;

/**
 * @member {String} long_desc
 */
Descriptor.prototype['long_desc'] = undefined;

/**
 * @member {module:model/DescriptorAdditionalDesc} additional_desc
 */
Descriptor.prototype['additional_desc'] = undefined;

/**
 * @member {Array.<module:model/MediaFile>} media
 */
Descriptor.prototype['media'] = undefined;

/**
 * @member {Array.<module:model/Image>} images
 */
Descriptor.prototype['images'] = undefined;






export default Descriptor;

