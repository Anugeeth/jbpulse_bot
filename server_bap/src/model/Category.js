/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Descriptor from './Descriptor';
import Id from './Id';
import TagGroup from './TagGroup';
import Time from './Time';

/**
 * The Category model module.
 * @module model/Category
 * @version 1.1.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * A label under which a collection of items can be grouped.
     * @alias module:model/Category
     */
    constructor() { 
        
        Category.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('parent_category_id')) {
                obj['parent_category_id'] = Id.constructFromObject(data['parent_category_id']);
            }
            if (data.hasOwnProperty('descriptor')) {
                obj['descriptor'] = Descriptor.constructFromObject(data['descriptor']);
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = Time.constructFromObject(data['time']);
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], Object);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [TagGroup]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `descriptor`
        if (data['descriptor']) { // data not null
          Descriptor.validateJSON(data['descriptor']);
        }
        // validate the optional field `time`
        if (data['time']) { // data not null
          Time.validateJSON(data['time']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                TagGroup.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * ID of the category
 * @member {String} id
 */
Category.prototype['id'] = undefined;

/**
 * @member {module:model/Id} parent_category_id
 */
Category.prototype['parent_category_id'] = undefined;

/**
 * @member {module:model/Descriptor} descriptor
 */
Category.prototype['descriptor'] = undefined;

/**
 * @member {module:model/Time} time
 */
Category.prototype['time'] = undefined;

/**
 * Time to live for an instance of this schema
 * @member {Object} ttl
 */
Category.prototype['ttl'] = undefined;

/**
 * @member {Array.<module:model/TagGroup>} tags
 */
Category.prototype['tags'] = undefined;






export default Category;

