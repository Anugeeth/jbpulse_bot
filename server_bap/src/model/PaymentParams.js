/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentParams model module.
 * @module model/PaymentParams
 * @version 1.1.0
 */
class PaymentParams {
    /**
     * Constructs a new <code>PaymentParams</code>.
     * @alias module:model/PaymentParams
     */
    constructor() { 
        
        PaymentParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentParams} obj Optional instance to populate.
     * @return {module:model/PaymentParams} The populated <code>PaymentParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentParams();

            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('bank_code')) {
                obj['bank_code'] = ApiClient.convertToType(data['bank_code'], 'String');
            }
            if (data.hasOwnProperty('bank_account_number')) {
                obj['bank_account_number'] = ApiClient.convertToType(data['bank_account_number'], 'String');
            }
            if (data.hasOwnProperty('virtual_payment_address')) {
                obj['virtual_payment_address'] = ApiClient.convertToType(data['virtual_payment_address'], 'String');
            }
            if (data.hasOwnProperty('source_bank_code')) {
                obj['source_bank_code'] = ApiClient.convertToType(data['source_bank_code'], 'String');
            }
            if (data.hasOwnProperty('source_bank_account_number')) {
                obj['source_bank_account_number'] = ApiClient.convertToType(data['source_bank_account_number'], 'String');
            }
            if (data.hasOwnProperty('source_virtual_payment_address')) {
                obj['source_virtual_payment_address'] = ApiClient.convertToType(data['source_virtual_payment_address'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['bank_code'] && !(typeof data['bank_code'] === 'string' || data['bank_code'] instanceof String)) {
            throw new Error("Expected the field `bank_code` to be a primitive type in the JSON string but got " + data['bank_code']);
        }
        // ensure the json data is a string
        if (data['bank_account_number'] && !(typeof data['bank_account_number'] === 'string' || data['bank_account_number'] instanceof String)) {
            throw new Error("Expected the field `bank_account_number` to be a primitive type in the JSON string but got " + data['bank_account_number']);
        }
        // ensure the json data is a string
        if (data['virtual_payment_address'] && !(typeof data['virtual_payment_address'] === 'string' || data['virtual_payment_address'] instanceof String)) {
            throw new Error("Expected the field `virtual_payment_address` to be a primitive type in the JSON string but got " + data['virtual_payment_address']);
        }
        // ensure the json data is a string
        if (data['source_bank_code'] && !(typeof data['source_bank_code'] === 'string' || data['source_bank_code'] instanceof String)) {
            throw new Error("Expected the field `source_bank_code` to be a primitive type in the JSON string but got " + data['source_bank_code']);
        }
        // ensure the json data is a string
        if (data['source_bank_account_number'] && !(typeof data['source_bank_account_number'] === 'string' || data['source_bank_account_number'] instanceof String)) {
            throw new Error("Expected the field `source_bank_account_number` to be a primitive type in the JSON string but got " + data['source_bank_account_number']);
        }
        // ensure the json data is a string
        if (data['source_virtual_payment_address'] && !(typeof data['source_virtual_payment_address'] === 'string' || data['source_virtual_payment_address'] instanceof String)) {
            throw new Error("Expected the field `source_virtual_payment_address` to be a primitive type in the JSON string but got " + data['source_virtual_payment_address']);
        }

        return true;
    }


}



/**
 * The reference transaction ID associated with a payment activity
 * @member {String} transaction_id
 */
PaymentParams.prototype['transaction_id'] = undefined;

/**
 * @member {String} amount
 */
PaymentParams.prototype['amount'] = undefined;

/**
 * @member {String} currency
 */
PaymentParams.prototype['currency'] = undefined;

/**
 * @member {String} bank_code
 */
PaymentParams.prototype['bank_code'] = undefined;

/**
 * @member {String} bank_account_number
 */
PaymentParams.prototype['bank_account_number'] = undefined;

/**
 * @member {String} virtual_payment_address
 */
PaymentParams.prototype['virtual_payment_address'] = undefined;

/**
 * @member {String} source_bank_code
 */
PaymentParams.prototype['source_bank_code'] = undefined;

/**
 * @member {String} source_bank_account_number
 */
PaymentParams.prototype['source_bank_account_number'] = undefined;

/**
 * @member {String} source_virtual_payment_address
 */
PaymentParams.prototype['source_virtual_payment_address'] = undefined;






export default PaymentParams;

