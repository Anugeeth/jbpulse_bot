/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddOn from './AddOn';
import CancellationTerm from './CancellationTerm';
import Descriptor from './Descriptor';
import Id from './Id';
import ItemQuantity from './ItemQuantity';
import ItemRefundTermsInner from './ItemRefundTermsInner';
import Organization from './Organization';
import Price from './Price';
import ReplacementTerm from './ReplacementTerm';
import ReturnTerm from './ReturnTerm';
import TagGroup from './TagGroup';
import Time from './Time';
import Value from './Value';
import XInput from './XInput';

/**
 * The Item model module.
 * @module model/Item
 * @version 1.1.0
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * Describes a product or a service offered to the end consumer by the provider. In the mobility sector, it can represent a fare product like one way journey. In the logistics sector, it can represent the delivery service offering. In the retail domain it can represent a product like a grocery item.
     * @alias module:model/Item
     */
    constructor() { 
        
        Item.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('parent_item_id')) {
                obj['parent_item_id'] = ApiClient.convertToType(data['parent_item_id'], Id);
            }
            if (data.hasOwnProperty('parent_item_quantity')) {
                obj['parent_item_quantity'] = ApiClient.convertToType(data['parent_item_quantity'], ItemQuantity);
            }
            if (data.hasOwnProperty('descriptor')) {
                obj['descriptor'] = ApiClient.convertToType(data['descriptor'], Descriptor);
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], Organization);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], Price);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], ItemQuantity);
            }
            if (data.hasOwnProperty('category_ids')) {
                obj['category_ids'] = ApiClient.convertToType(data['category_ids'], [Id]);
            }
            if (data.hasOwnProperty('fulfillment_ids')) {
                obj['fulfillment_ids'] = ApiClient.convertToType(data['fulfillment_ids'], [Id]);
            }
            if (data.hasOwnProperty('location_ids')) {
                obj['location_ids'] = ApiClient.convertToType(data['location_ids'], [Id]);
            }
            if (data.hasOwnProperty('payment_ids')) {
                obj['payment_ids'] = ApiClient.convertToType(data['payment_ids'], [Id]);
            }
            if (data.hasOwnProperty('add_ons')) {
                obj['add_ons'] = ApiClient.convertToType(data['add_ons'], [AddOn]);
            }
            if (data.hasOwnProperty('cancellation_terms')) {
                obj['cancellation_terms'] = ApiClient.convertToType(data['cancellation_terms'], [CancellationTerm]);
            }
            if (data.hasOwnProperty('refund_terms')) {
                obj['refund_terms'] = ApiClient.convertToType(data['refund_terms'], [ItemRefundTermsInner]);
            }
            if (data.hasOwnProperty('replacement_terms')) {
                obj['replacement_terms'] = ApiClient.convertToType(data['replacement_terms'], [ReplacementTerm]);
            }
            if (data.hasOwnProperty('return_terms')) {
                obj['return_terms'] = ApiClient.convertToType(data['return_terms'], [ReturnTerm]);
            }
            if (data.hasOwnProperty('xinput')) {
                obj['xinput'] = ApiClient.convertToType(data['xinput'], XInput);
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], Time);
            }
            if (data.hasOwnProperty('rateable')) {
                obj['rateable'] = ApiClient.convertToType(data['rateable'], 'Boolean');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], Value);
            }
            if (data.hasOwnProperty('matched')) {
                obj['matched'] = ApiClient.convertToType(data['matched'], 'Boolean');
            }
            if (data.hasOwnProperty('related')) {
                obj['related'] = ApiClient.convertToType(data['related'], 'Boolean');
            }
            if (data.hasOwnProperty('recommended')) {
                obj['recommended'] = ApiClient.convertToType(data['recommended'], 'Boolean');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [TagGroup]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `parent_item_quantity`
        if (data['parent_item_quantity']) { // data not null
          ItemQuantity.validateJSON(data['parent_item_quantity']);
        }
        // validate the optional field `descriptor`
        if (data['descriptor']) { // data not null
          Descriptor.validateJSON(data['descriptor']);
        }
        // validate the optional field `creator`
        if (data['creator']) { // data not null
          Organization.validateJSON(data['creator']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        // validate the optional field `quantity`
        if (data['quantity']) { // data not null
          ItemQuantity.validateJSON(data['quantity']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category_ids'])) {
            throw new Error("Expected the field `category_ids` to be an array in the JSON data but got " + data['category_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fulfillment_ids'])) {
            throw new Error("Expected the field `fulfillment_ids` to be an array in the JSON data but got " + data['fulfillment_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['location_ids'])) {
            throw new Error("Expected the field `location_ids` to be an array in the JSON data but got " + data['location_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['payment_ids'])) {
            throw new Error("Expected the field `payment_ids` to be an array in the JSON data but got " + data['payment_ids']);
        }
        if (data['add_ons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['add_ons'])) {
                throw new Error("Expected the field `add_ons` to be an array in the JSON data but got " + data['add_ons']);
            }
            // validate the optional field `add_ons` (array)
            for (const item of data['add_ons']) {
                AddOn.validateJSON(item);
            };
        }
        if (data['cancellation_terms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cancellation_terms'])) {
                throw new Error("Expected the field `cancellation_terms` to be an array in the JSON data but got " + data['cancellation_terms']);
            }
            // validate the optional field `cancellation_terms` (array)
            for (const item of data['cancellation_terms']) {
                CancellationTerm.validateJSON(item);
            };
        }
        if (data['refund_terms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refund_terms'])) {
                throw new Error("Expected the field `refund_terms` to be an array in the JSON data but got " + data['refund_terms']);
            }
            // validate the optional field `refund_terms` (array)
            for (const item of data['refund_terms']) {
                ItemRefundTermsInner.validateJSON(item);
            };
        }
        if (data['replacement_terms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['replacement_terms'])) {
                throw new Error("Expected the field `replacement_terms` to be an array in the JSON data but got " + data['replacement_terms']);
            }
            // validate the optional field `replacement_terms` (array)
            for (const item of data['replacement_terms']) {
                ReplacementTerm.validateJSON(item);
            };
        }
        if (data['return_terms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['return_terms'])) {
                throw new Error("Expected the field `return_terms` to be an array in the JSON data but got " + data['return_terms']);
            }
            // validate the optional field `return_terms` (array)
            for (const item of data['return_terms']) {
                ReturnTerm.validateJSON(item);
            };
        }
        // validate the optional field `xinput`
        if (data['xinput']) { // data not null
          XInput.validateJSON(data['xinput']);
        }
        // validate the optional field `time`
        if (data['time']) { // data not null
          Time.validateJSON(data['time']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                TagGroup.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * ID of the item.
 * @member {String} id
 */
Item.prototype['id'] = undefined;

/**
 * @member {module:model/Id} parent_item_id
 */
Item.prototype['parent_item_id'] = undefined;

/**
 * @member {module:model/ItemQuantity} parent_item_quantity
 */
Item.prototype['parent_item_quantity'] = undefined;

/**
 * @member {module:model/Descriptor} descriptor
 */
Item.prototype['descriptor'] = undefined;

/**
 * @member {module:model/Organization} creator
 */
Item.prototype['creator'] = undefined;

/**
 * @member {module:model/Price} price
 */
Item.prototype['price'] = undefined;

/**
 * @member {module:model/ItemQuantity} quantity
 */
Item.prototype['quantity'] = undefined;

/**
 * Categories this item can be listed under
 * @member {Array.<module:model/Id>} category_ids
 */
Item.prototype['category_ids'] = undefined;

/**
 * Modes through which this item can be fulfilled
 * @member {Array.<module:model/Id>} fulfillment_ids
 */
Item.prototype['fulfillment_ids'] = undefined;

/**
 * Provider Locations this item is available in
 * @member {Array.<module:model/Id>} location_ids
 */
Item.prototype['location_ids'] = undefined;

/**
 * Payment modalities through which this item can be ordered
 * @member {Array.<module:model/Id>} payment_ids
 */
Item.prototype['payment_ids'] = undefined;

/**
 * @member {Array.<module:model/AddOn>} add_ons
 */
Item.prototype['add_ons'] = undefined;

/**
 * Cancellation terms of this item
 * @member {Array.<module:model/CancellationTerm>} cancellation_terms
 */
Item.prototype['cancellation_terms'] = undefined;

/**
 * Refund terms of this item
 * @member {Array.<module:model/ItemRefundTermsInner>} refund_terms
 */
Item.prototype['refund_terms'] = undefined;

/**
 * Terms that are applicable be met when this item is replaced
 * @member {Array.<module:model/ReplacementTerm>} replacement_terms
 */
Item.prototype['replacement_terms'] = undefined;

/**
 * Terms that are applicable when this item is returned
 * @member {Array.<module:model/ReturnTerm>} return_terms
 */
Item.prototype['return_terms'] = undefined;

/**
 * @member {module:model/XInput} xinput
 */
Item.prototype['xinput'] = undefined;

/**
 * @member {module:model/Time} time
 */
Item.prototype['time'] = undefined;

/**
 * Whether this item can be rated
 * @member {Boolean} rateable
 */
Item.prototype['rateable'] = undefined;

/**
 * @member {module:model/Value} rating
 */
Item.prototype['rating'] = undefined;

/**
 * Whether this item is an exact match of the request
 * @member {Boolean} matched
 */
Item.prototype['matched'] = undefined;

/**
 * Whether this item is a related item to the exactly matched item
 * @member {Boolean} related
 */
Item.prototype['related'] = undefined;

/**
 * Whether this item is a recommended item to a response
 * @member {Boolean} recommended
 */
Item.prototype['recommended'] = undefined;

/**
 * Time to live in seconds for an instance of this schema
 * @member {String} ttl
 */
Item.prototype['ttl'] = undefined;

/**
 * @member {Array.<module:model/TagGroup>} tags
 */
Item.prototype['tags'] = undefined;






export default Item;

