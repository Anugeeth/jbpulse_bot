/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Form model module.
 * @module model/Form
 * @version 1.1.0
 */
class Form {
    /**
     * Constructs a new <code>Form</code>.
     * Describes a form
     * @alias module:model/Form
     */
    constructor() { 
        
        Form.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Form</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Form} obj Optional instance to populate.
     * @return {module:model/Form} The populated <code>Form</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Form();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mime_type')) {
                obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
            }
            if (data.hasOwnProperty('submission_id')) {
                obj['submission_id'] = ApiClient.convertToType(data['submission_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Form</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Form</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['mime_type'] && !(typeof data['mime_type'] === 'string' || data['mime_type'] instanceof String)) {
            throw new Error("Expected the field `mime_type` to be a primitive type in the JSON string but got " + data['mime_type']);
        }
        // ensure the json data is a string
        if (data['submission_id'] && !(typeof data['submission_id'] === 'string' || data['submission_id'] instanceof String)) {
            throw new Error("Expected the field `submission_id` to be a primitive type in the JSON string but got " + data['submission_id']);
        }

        return true;
    }


}



/**
 * The URL from where the form can be fetched. The content fetched from the url must be processed as per the mime_type specified in this object. Once fetched, the rendering platform can choosed to render the form as-is as an embeddable element; or process it further to blend with the theme of the application. In case the interface is non-visual, the the render can process the form data and reproduce it as per the standard specified in the form.
 * @member {String} url
 */
Form.prototype['url'] = undefined;

/**
 * The form submission data
 * @member {Object.<String, String>} data
 */
Form.prototype['data'] = undefined;

/**
 * This field indicates the nature and format of the form received by querying the url. MIME types are defined and standardized in IETF's RFC 6838.
 * @member {module:model/Form.MimeTypeEnum} mime_type
 */
Form.prototype['mime_type'] = undefined;

/**
 * @member {String} submission_id
 */
Form.prototype['submission_id'] = undefined;





/**
 * Allowed values for the <code>mime_type</code> property.
 * @enum {String}
 * @readonly
 */
Form['MimeTypeEnum'] = {

    /**
     * value: "text/html"
     * @const
     */
    "text/html": "text/html",

    /**
     * value: "application/xml"
     * @const
     */
    "application/xml": "application/xml"
};



export default Form;

