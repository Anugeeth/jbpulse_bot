/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Circle from './Circle';
import City from './City';
import Country from './Country';
import Descriptor from './Descriptor';
import State from './State';
import Value from './Value';

/**
 * The Location model module.
 * @module model/Location
 * @version 1.1.0
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * The physical location of something
     * @alias module:model/Location
     */
    constructor() { 
        
        Location.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('descriptor')) {
                obj['descriptor'] = Descriptor.constructFromObject(data['descriptor']);
            }
            if (data.hasOwnProperty('map_url')) {
                obj['map_url'] = ApiClient.convertToType(data['map_url'], 'String');
            }
            if (data.hasOwnProperty('gps')) {
                obj['gps'] = ApiClient.convertToType(data['gps'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], City);
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], State);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], Country);
            }
            if (data.hasOwnProperty('area_code')) {
                obj['area_code'] = ApiClient.convertToType(data['area_code'], 'String');
            }
            if (data.hasOwnProperty('circle')) {
                obj['circle'] = Circle.constructFromObject(data['circle']);
            }
            if (data.hasOwnProperty('polygon')) {
                obj['polygon'] = ApiClient.convertToType(data['polygon'], 'String');
            }
            if (data.hasOwnProperty('3dspace')) {
                obj['3dspace'] = ApiClient.convertToType(data['3dspace'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], Value);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `descriptor`
        if (data['descriptor']) { // data not null
          Descriptor.validateJSON(data['descriptor']);
        }
        // ensure the json data is a string
        if (data['map_url'] && !(typeof data['map_url'] === 'string' || data['map_url'] instanceof String)) {
            throw new Error("Expected the field `map_url` to be a primitive type in the JSON string but got " + data['map_url']);
        }
        // ensure the json data is a string
        if (data['gps'] && !(typeof data['gps'] === 'string' || data['gps'] instanceof String)) {
            throw new Error("Expected the field `gps` to be a primitive type in the JSON string but got " + data['gps']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // validate the optional field `city`
        if (data['city']) { // data not null
          City.validateJSON(data['city']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          State.validateJSON(data['state']);
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          Country.validateJSON(data['country']);
        }
        // ensure the json data is a string
        if (data['area_code'] && !(typeof data['area_code'] === 'string' || data['area_code'] instanceof String)) {
            throw new Error("Expected the field `area_code` to be a primitive type in the JSON string but got " + data['area_code']);
        }
        // validate the optional field `circle`
        if (data['circle']) { // data not null
          Circle.validateJSON(data['circle']);
        }
        // ensure the json data is a string
        if (data['polygon'] && !(typeof data['polygon'] === 'string' || data['polygon'] instanceof String)) {
            throw new Error("Expected the field `polygon` to be a primitive type in the JSON string but got " + data['polygon']);
        }
        // ensure the json data is a string
        if (data['3dspace'] && !(typeof data['3dspace'] === 'string' || data['3dspace'] instanceof String)) {
            throw new Error("Expected the field `3dspace` to be a primitive type in the JSON string but got " + data['3dspace']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
Location.prototype['id'] = undefined;

/**
 * @member {module:model/Descriptor} descriptor
 */
Location.prototype['descriptor'] = undefined;

/**
 * The url to the map of the location. This can be a globally recognized map url or the one specified by the network policy.
 * @member {String} map_url
 */
Location.prototype['map_url'] = undefined;

/**
 * Describes a GPS coordinate
 * @member {String} gps
 */
Location.prototype['gps'] = undefined;

/**
 * Describes a postal address.
 * @member {String} address
 */
Location.prototype['address'] = undefined;

/**
 * @member {module:model/City} city
 */
Location.prototype['city'] = undefined;

/**
 * The state this location is, or is located within
 * @member {String} district
 */
Location.prototype['district'] = undefined;

/**
 * @member {module:model/State} state
 */
Location.prototype['state'] = undefined;

/**
 * @member {module:model/Country} country
 */
Location.prototype['country'] = undefined;

/**
 * @member {String} area_code
 */
Location.prototype['area_code'] = undefined;

/**
 * @member {module:model/Circle} circle
 */
Location.prototype['circle'] = undefined;

/**
 * The boundary polygon of this location
 * @member {String} polygon
 */
Location.prototype['polygon'] = undefined;

/**
 * The three dimensional region describing this location
 * @member {String} 3dspace
 */
Location.prototype['3dspace'] = undefined;

/**
 * @member {module:model/Value} rating
 */
Location.prototype['rating'] = undefined;






export default Location;

