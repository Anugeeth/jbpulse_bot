/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Credential from './Credential';
import Image from './Image';
import PersonLanguagesInner from './PersonLanguagesInner';
import PersonSkillsInner from './PersonSkillsInner';
import TagGroup from './TagGroup';

/**
 * The Person model module.
 * @module model/Person
 * @version 1.1.0
 */
class Person {
    /**
     * Constructs a new <code>Person</code>.
     * Describes a person as any individual
     * @alias module:model/Person
     */
    constructor() { 
        
        Person.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Person</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Person} obj Optional instance to populate.
     * @return {module:model/Person} The populated <code>Person</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Person();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'String');
            }
            if (data.hasOwnProperty('dob')) {
                obj['dob'] = ApiClient.convertToType(data['dob'], 'Date');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('creds')) {
                obj['creds'] = ApiClient.convertToType(data['creds'], [Credential]);
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], [PersonLanguagesInner]);
            }
            if (data.hasOwnProperty('skills')) {
                obj['skills'] = ApiClient.convertToType(data['skills'], [PersonSkillsInner]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [TagGroup]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Person</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Person</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['age'] && !(typeof data['age'] === 'string' || data['age'] instanceof String)) {
            throw new Error("Expected the field `age` to be a primitive type in the JSON string but got " + data['age']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        if (data['creds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['creds'])) {
                throw new Error("Expected the field `creds` to be an array in the JSON data but got " + data['creds']);
            }
            // validate the optional field `creds` (array)
            for (const item of data['creds']) {
                Credential.validateJSON(item);
            };
        }
        if (data['languages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['languages'])) {
                throw new Error("Expected the field `languages` to be an array in the JSON data but got " + data['languages']);
            }
            // validate the optional field `languages` (array)
            for (const item of data['languages']) {
                PersonLanguagesInner.validateJSON(item);
            };
        }
        if (data['skills']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['skills'])) {
                throw new Error("Expected the field `skills` to be an array in the JSON data but got " + data['skills']);
            }
            // validate the optional field `skills` (array)
            for (const item of data['skills']) {
                PersonSkillsInner.validateJSON(item);
            };
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                TagGroup.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Describes the identity of the person
 * @member {String} id
 */
Person.prototype['id'] = undefined;

/**
 * Profile url of the person
 * @member {String} url
 */
Person.prototype['url'] = undefined;

/**
 * the name of the person
 * @member {String} name
 */
Person.prototype['name'] = undefined;

/**
 * @member {module:model/Image} image
 */
Person.prototype['image'] = undefined;

/**
 * Describes duration as per ISO8601 format
 * @member {String} age
 */
Person.prototype['age'] = undefined;

/**
 * Date of birth of the person
 * @member {Date} dob
 */
Person.prototype['dob'] = undefined;

/**
 * Gender of something, typically a Person, but possibly also fictional characters, animals, etc. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.Allowed values for this field can be published in the network policy
 * @member {String} gender
 */
Person.prototype['gender'] = undefined;

/**
 * @member {Array.<module:model/Credential>} creds
 */
Person.prototype['creds'] = undefined;

/**
 * @member {Array.<module:model/PersonLanguagesInner>} languages
 */
Person.prototype['languages'] = undefined;

/**
 * @member {Array.<module:model/PersonSkillsInner>} skills
 */
Person.prototype['skills'] = undefined;

/**
 * @member {Array.<module:model/TagGroup>} tags
 */
Person.prototype['tags'] = undefined;






export default Person;

