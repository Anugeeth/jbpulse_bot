/**
 * Beckn ODR API Specification
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelPostRequest from '../model/CancelPostRequest';
import ConfirmPostRequest from '../model/ConfirmPostRequest';
import InitPostRequest from '../model/InitPostRequest';
import RatingPostRequest from '../model/RatingPostRequest';
import SearchPost200Response from '../model/SearchPost200Response';
import SearchPostRequest from '../model/SearchPostRequest';
import SelectPostRequest from '../model/SelectPostRequest';
import StatusPostRequest from '../model/StatusPostRequest';
import SupportPostRequest from '../model/SupportPostRequest';
import UpdatePostRequest from '../model/UpdatePostRequest';

/**
* BecknApplicationPlatformBAP service.
* @module api/BecknApplicationPlatformBAPApi
* @version 1.1.0
*/
export default class BecknApplicationPlatformBAPApi {

    /**
    * Constructs a new BecknApplicationPlatformBAPApi. 
    * @alias module:api/BecknApplicationPlatformBAPApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelPost operation.
     * @callback module:api/BecknApplicationPlatformBAPApi~cancelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel the dispute.
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelPostRequest} [cancelPostRequest] 
     * @param {module:api/BecknApplicationPlatformBAPApi~cancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPost200Response}
     */
    cancelPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['cancelPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SubscriberAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPost200Response;
      return this.apiClient.callApi(
        '/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmPost operation.
     * @callback module:api/BecknApplicationPlatformBAPApi~confirmPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirms filing of the dispute by agreeing to the terms and conditions.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConfirmPostRequest} [confirmPostRequest] 
     * @param {module:api/BecknApplicationPlatformBAPApi~confirmPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPost200Response}
     */
    confirmPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['confirmPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SubscriberAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPost200Response;
      return this.apiClient.callApi(
        '/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initPost operation.
     * @callback module:api/BecknApplicationPlatformBAPApi~initPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize the order for the dispute by providing essential details about the parties, documents and nature of the disagreement.
     * @param {Object} opts Optional parameters
     * @param {module:model/InitPostRequest} [initPostRequest] 
     * @param {module:api/BecknApplicationPlatformBAPApi~initPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPost200Response}
     */
    initPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['initPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SubscriberAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPost200Response;
      return this.apiClient.callApi(
        '/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ratingPost operation.
     * @callback module:api/BecknApplicationPlatformBAPApi~ratingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provide feedback on a service provided by the ODR.
     * @param {Object} opts Optional parameters
     * @param {module:model/RatingPostRequest} [ratingPostRequest] 
     * @param {module:api/BecknApplicationPlatformBAPApi~ratingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPost200Response}
     */
    ratingPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['ratingPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SubscriberAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPost200Response;
      return this.apiClient.callApi(
        '/rating', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPost operation.
     * @callback module:api/BecknApplicationPlatformBAPApi~searchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This allows the customer to search for Online Dispute Resolution Services.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchPostRequest} [searchPostRequest] 
     * @param {module:api/BecknApplicationPlatformBAPApi~searchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPost200Response}
     */
    searchPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['searchPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SubscriberAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPost200Response;
      return this.apiClient.callApi(
        '/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selectPost operation.
     * @callback module:api/BecknApplicationPlatformBAPApi~selectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer chooses a provider and the dispute resolution service they require.
     * @param {Object} opts Optional parameters
     * @param {module:model/SelectPostRequest} [selectPostRequest] 
     * @param {module:api/BecknApplicationPlatformBAPApi~selectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPost200Response}
     */
    selectPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['selectPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SubscriberAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPost200Response;
      return this.apiClient.callApi(
        '/select', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusPost operation.
     * @callback module:api/BecknApplicationPlatformBAPApi~statusPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the latest status of the dispute.
     * @param {Object} opts Optional parameters
     * @param {module:model/StatusPostRequest} [statusPostRequest] 
     * @param {module:api/BecknApplicationPlatformBAPApi~statusPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPost200Response}
     */
    statusPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['statusPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SubscriberAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPost200Response;
      return this.apiClient.callApi(
        '/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the supportPost operation.
     * @callback module:api/BecknApplicationPlatformBAPApi~supportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contact support for the dispute.
     * @param {Object} opts Optional parameters
     * @param {module:model/SupportPostRequest} [supportPostRequest] 
     * @param {module:api/BecknApplicationPlatformBAPApi~supportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPost200Response}
     */
    supportPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['supportPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SubscriberAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPost200Response;
      return this.apiClient.callApi(
        '/support', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePost operation.
     * @callback module:api/BecknApplicationPlatformBAPApi~updatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the details of the dispute.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePostRequest} [updatePostRequest] 
     * @param {module:api/BecknApplicationPlatformBAPApi~updatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPost200Response}
     */
    updatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['updatePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['SubscriberAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPost200Response;
      return this.apiClient.callApi(
        '/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
