/*
 * Beckn ODR API Specification
 *
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * API version: 1.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BecknApplicationPlatformBAPAPIController binds http requests to an api service and writes the service results to the http response
type BecknApplicationPlatformBAPAPIController struct {
	service BecknApplicationPlatformBAPAPIServicer
	errorHandler ErrorHandler
}

// BecknApplicationPlatformBAPAPIOption for how the controller is set up.
type BecknApplicationPlatformBAPAPIOption func(*BecknApplicationPlatformBAPAPIController)

// WithBecknApplicationPlatformBAPAPIErrorHandler inject ErrorHandler into controller
func WithBecknApplicationPlatformBAPAPIErrorHandler(h ErrorHandler) BecknApplicationPlatformBAPAPIOption {
	return func(c *BecknApplicationPlatformBAPAPIController) {
		c.errorHandler = h
	}
}

// NewBecknApplicationPlatformBAPAPIController creates a default api controller
func NewBecknApplicationPlatformBAPAPIController(s BecknApplicationPlatformBAPAPIServicer, opts ...BecknApplicationPlatformBAPAPIOption) Router {
	controller := &BecknApplicationPlatformBAPAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BecknApplicationPlatformBAPAPIController
func (c *BecknApplicationPlatformBAPAPIController) Routes() Routes {
	return Routes{
		"OnCancelPost": Route{
			strings.ToUpper("Post"),
			"/on_cancel",
			c.OnCancelPost,
		},
		"OnConfirmPost": Route{
			strings.ToUpper("Post"),
			"/on_confirm",
			c.OnConfirmPost,
		},
		"OnInitPost": Route{
			strings.ToUpper("Post"),
			"/on_init",
			c.OnInitPost,
		},
		"OnRatingPost": Route{
			strings.ToUpper("Post"),
			"/on_rating",
			c.OnRatingPost,
		},
		"OnSearchPost": Route{
			strings.ToUpper("Post"),
			"/on_search",
			c.OnSearchPost,
		},
		"OnSelectPost": Route{
			strings.ToUpper("Post"),
			"/on_select",
			c.OnSelectPost,
		},
		"OnStatusPost": Route{
			strings.ToUpper("Post"),
			"/on_status",
			c.OnStatusPost,
		},
		"OnSupportPost": Route{
			strings.ToUpper("Post"),
			"/on_support",
			c.OnSupportPost,
		},
		"OnUpdatePost": Route{
			strings.ToUpper("Post"),
			"/on_update",
			c.OnUpdatePost,
		},
	}
}

// OnCancelPost - 
func (c *BecknApplicationPlatformBAPAPIController) OnCancelPost(w http.ResponseWriter, r *http.Request) {
	onCancelPostRequestParam := OnCancelPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&onCancelPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOnCancelPostRequestRequired(onCancelPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOnCancelPostRequestConstraints(onCancelPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OnCancelPost(r.Context(), onCancelPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OnConfirmPost - 
func (c *BecknApplicationPlatformBAPAPIController) OnConfirmPost(w http.ResponseWriter, r *http.Request) {
	onConfirmPostRequestParam := OnConfirmPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&onConfirmPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOnConfirmPostRequestRequired(onConfirmPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOnConfirmPostRequestConstraints(onConfirmPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OnConfirmPost(r.Context(), onConfirmPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OnInitPost - 
func (c *BecknApplicationPlatformBAPAPIController) OnInitPost(w http.ResponseWriter, r *http.Request) {
	onInitPostRequestParam := OnInitPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&onInitPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOnInitPostRequestRequired(onInitPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOnInitPostRequestConstraints(onInitPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OnInitPost(r.Context(), onInitPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OnRatingPost - 
func (c *BecknApplicationPlatformBAPAPIController) OnRatingPost(w http.ResponseWriter, r *http.Request) {
	onRatingPostRequestParam := OnRatingPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&onRatingPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOnRatingPostRequestRequired(onRatingPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOnRatingPostRequestConstraints(onRatingPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OnRatingPost(r.Context(), onRatingPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OnSearchPost - 
func (c *BecknApplicationPlatformBAPAPIController) OnSearchPost(w http.ResponseWriter, r *http.Request) {
	onSearchPostRequestParam := OnSearchPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&onSearchPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOnSearchPostRequestRequired(onSearchPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOnSearchPostRequestConstraints(onSearchPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OnSearchPost(r.Context(), onSearchPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OnSelectPost - 
func (c *BecknApplicationPlatformBAPAPIController) OnSelectPost(w http.ResponseWriter, r *http.Request) {
	onSelectPostRequestParam := OnSelectPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&onSelectPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOnSelectPostRequestRequired(onSelectPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOnSelectPostRequestConstraints(onSelectPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OnSelectPost(r.Context(), onSelectPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OnStatusPost - 
func (c *BecknApplicationPlatformBAPAPIController) OnStatusPost(w http.ResponseWriter, r *http.Request) {
	onStatusPostRequestParam := OnStatusPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&onStatusPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOnStatusPostRequestRequired(onStatusPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOnStatusPostRequestConstraints(onStatusPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OnStatusPost(r.Context(), onStatusPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OnSupportPost - 
func (c *BecknApplicationPlatformBAPAPIController) OnSupportPost(w http.ResponseWriter, r *http.Request) {
	onSupportPostRequestParam := OnSupportPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&onSupportPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOnSupportPostRequestRequired(onSupportPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOnSupportPostRequestConstraints(onSupportPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OnSupportPost(r.Context(), onSupportPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OnUpdatePost - 
func (c *BecknApplicationPlatformBAPAPIController) OnUpdatePost(w http.ResponseWriter, r *http.Request) {
	onUpdatePostRequestParam := OnUpdatePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&onUpdatePostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOnUpdatePostRequestRequired(onUpdatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOnUpdatePostRequestConstraints(onUpdatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OnUpdatePost(r.Context(), onUpdatePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
