/*
 * Beckn ODR API Specification
 *
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * API version: 1.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// Intent - The intent to buy or avail a product or a service. The BAP can declare the intent of the consumer containing <ul><li>What they want (A product, service, offer)</li><li>Who they want (A seller, service provider, agent etc)</li><li>Where they want it and where they want it from</li><li>When they want it (start and end time of fulfillment</li><li>How they want to pay for it</li></ul><br>This has properties like descriptor,provider,fulfillment,payment,category,offer,item,tags<br>This is typically used by the BAP to send the purpose of the user's search to the BPP. This will be used by the BPP to find products or services it offers that may match the user's intent.<br>For example, in Mobility, the mobility consumer declares a mobility intent. In this case, the mobility consumer declares information that describes various aspects of their journey like,<ul><li>Where would they like to begin their journey (intent.fulfillment.start.location)</li><li>Where would they like to end their journey (intent.fulfillment.end.location)</li><li>When would they like to begin their journey (intent.fulfillment.start.time)</li><li>When would they like to end their journey (intent.fulfillment.end.time)</li><li>Who is the transport service provider they would like to avail services from (intent.provider)</li><li>Who is traveling (This is not recommended in public networks) (intent.fulfillment.customer)</li><li>What kind of fare product would they like to purchase (intent.item)</li><li>What add-on services would they like to avail</li><li>What offers would they like to apply on their booking (intent.offer)</li><li>What category of services would they like to avail (intent.category)</li><li>What additional luggage are they carrying</li><li>How would they like to pay for their journey (intent.payment)</li></ul><br>For example, in health domain, a consumer declares the intent for a lab booking the describes various aspects of their booking like,<ul><li>Where would they like to get their scan/test done (intent.fulfillment.start.location)</li><li>When would they like to get their scan/test done (intent.fulfillment.start.time)</li><li>When would they like to get the results of their test/scan (intent.fulfillment.end.time)</li><li>Who is the service provider they would like to avail services from (intent.provider)</li><li>Who is getting the test/scan (intent.fulfillment.customer)</li><li>What kind of test/scan would they like to purchase (intent.item)</li><li>What category of services would they like to avail (intent.category)</li><li>How would they like to pay for their journey (intent.payment)</li></ul>
type Intent struct {

	Descriptor Descriptor `json:"descriptor,omitempty"`

	Provider Provider `json:"provider,omitempty"`

	Fulfillment Fulfillment `json:"fulfillment,omitempty"`

	Location Location `json:"location,omitempty"`

	Payment Payment `json:"payment,omitempty"`

	Category Category `json:"category,omitempty"`

	Offer Offer `json:"offer,omitempty"`

	Item Item `json:"item,omitempty"`

	Tags []TagGroup `json:"tags,omitempty"`
}

// AssertIntentRequired checks if the required fields are not zero-ed
func AssertIntentRequired(obj Intent) error {
	if err := AssertDescriptorRequired(obj.Descriptor); err != nil {
		return err
	}
	if err := AssertProviderRequired(obj.Provider); err != nil {
		return err
	}
	if err := AssertFulfillmentRequired(obj.Fulfillment); err != nil {
		return err
	}
	if err := AssertLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertPaymentRequired(obj.Payment); err != nil {
		return err
	}
	if err := AssertCategoryRequired(obj.Category); err != nil {
		return err
	}
	if err := AssertOfferRequired(obj.Offer); err != nil {
		return err
	}
	if err := AssertItemRequired(obj.Item); err != nil {
		return err
	}
	for _, el := range obj.Tags {
		if err := AssertTagGroupRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertIntentConstraints checks if the values respects the defined constraints
func AssertIntentConstraints(obj Intent) error {
	return nil
}
