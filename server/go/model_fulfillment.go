/*
 * Beckn ODR API Specification
 *
 * Adaptation of Beckn protocol for the ODR sector.
 *
 * API version: 1.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// Fulfillment - Describes how a an order will be rendered/fulfilled to the end-customer
type Fulfillment struct {

	// Unique reference ID to the fulfillment of an order
	Id string `json:"id,omitempty"`

	// A code that describes the mode of fulfillment. This is typically set when there are multiple ways an order can be fulfilled. For example, a retail order can be fulfilled either via store pickup or a home delivery. Similarly, a medical consultation can be provided either in-person or via tele-consultation. The network policy must publish standard fulfillment type codes for the different modes of fulfillment.
	Type string `json:"type,omitempty"`

	// Whether the fulfillment can be rated or not
	Rateable bool `json:"rateable,omitempty"`

	Rating Value `json:"rating,omitempty"`

	State FulfillmentState `json:"state,omitempty"`

	// Indicates whether the fulfillment allows tracking
	Tracking bool `json:"tracking,omitempty"`

	Customer Customer `json:"customer,omitempty"`

	Agent Agent `json:"agent,omitempty"`

	Contact Contact `json:"contact,omitempty"`

	Vehicle Vehicle `json:"vehicle,omitempty"`

	// The list of logical stops encountered during the fulfillment of an order.
	Stops []Stop `json:"stops,omitempty"`

	// The physical path taken by the agent that can be rendered on a map. The allowed format of this property can be set by the network.
	Path string `json:"path,omitempty"`

	Tags []TagGroup `json:"tags,omitempty"`
}

// AssertFulfillmentRequired checks if the required fields are not zero-ed
func AssertFulfillmentRequired(obj Fulfillment) error {
	if err := AssertFulfillmentStateRequired(obj.State); err != nil {
		return err
	}
	if err := AssertCustomerRequired(obj.Customer); err != nil {
		return err
	}
	if err := AssertAgentRequired(obj.Agent); err != nil {
		return err
	}
	if err := AssertContactRequired(obj.Contact); err != nil {
		return err
	}
	if err := AssertVehicleRequired(obj.Vehicle); err != nil {
		return err
	}
	for _, el := range obj.Stops {
		if err := AssertStopRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Tags {
		if err := AssertTagGroupRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertFulfillmentConstraints checks if the values respects the defined constraints
func AssertFulfillmentConstraints(obj Fulfillment) error {
	return nil
}
